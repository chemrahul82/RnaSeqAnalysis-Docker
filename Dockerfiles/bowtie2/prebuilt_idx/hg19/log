Sending build context to Docker daemon 7.168 kB
Step 1 : FROM python:2.7-slim
 ---> 387faf8426c1
Step 2 : MAINTAINER Rahul K. Das, https://github.com/chemrahul82
 ---> Using cache
 ---> ec2b03251cbc
Step 3 : RUN mkdir -p /usr/local/bin
 ---> Using cache
 ---> 538e45964471
Step 4 : WORKDIR /usr/local/bin
 ---> Using cache
 ---> 7efafc3ead35
Step 5 : RUN apt-get update && apt-get install -y libpython2.7-dev wget unzip dtrx && wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.2.9/bowtie2-2.2.9-linux-x86_64.zip && unzip bowtie2-2.2.9-linux-x86_64.zip
 ---> Using cache
 ---> 785c16a19312
Step 6 : ENV PATH $PATH:/usr/local/bin/:/usr/local/bin/bowtie2-2.2.9
 ---> Using cache
 ---> 922465581cdf
Step 7 : RUN wget -q ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_19/GRCh37.p13.genome.fa.gz && gunzip GRCh37.p13.genome.fa.gz && mv GRCh37.p13.genome.fa hg19.fasta
 ---> Running in 5db3c08817a3
 ---> 7b4286e8ce2f
Removing intermediate container 5db3c08817a3
Step 8 : RUN mkdir -p /usr/local/bin/idx_hg19 && bowtie2-build hg19.fasta idx_hg19/bowtie2
 ---> Running in a4127bd506e1
[91mBuilding a SMALL index
[0mSettings:
  Output files: "idx_hg19/bowtie2.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  hg19.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:30
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:21
bmax according to bmaxDivN setting: 747922037
Using parameters --bmax 560941528 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 560941528 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:22
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:16
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:34
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.3241e+08 (target: 560941527)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (560941528) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 221138879 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:22
Returning block of 221138880 for bucket 1
Getting block 2 of 9
  Reserving size (560941528) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 351635487 for bucket 2
  (Using difference cover)
  Sorting block time: 00:03:45
Returning block of 351635488 for bucket 2
Getting block 3 of 9
  Reserving size (560941528) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 392348920 for bucket 3
  (Using difference cover)
  Sorting block time: 00:04:09
Returning block of 392348921 for bucket 3
Getting block 4 of 9
  Reserving size (560941528) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 487149124 for bucket 4
  (Using difference cover)
  Sorting block time: 00:05:39
Returning block of 487149125 for bucket 4
Getting block 5 of 9
  Reserving size (560941528) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 277778462 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:54
Returning block of 277778463 for bucket 5
Getting block 6 of 9
  Reserving size (560941528) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 410476835 for bucket 6
  (Using difference cover)
  Sorting block time: 00:04:35
Returning block of 410476836 for bucket 6
Getting block 7 of 9
  Reserving size (560941528) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 277056135 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:48
Returning block of 277056136 for bucket 7
Getting block 8 of 9
  Reserving size (560941528) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 540937975 for bucket 8
  (Using difference cover)
  Sorting block time: 00:05:56
Returning block of 540937976 for bucket 8
Getting block 9 of 9
  Reserving size (560941528) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 33166324 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:18
Returning block of 33166325 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 881799876
fchr[G]: 1495117925
fchr[T]: 2108886948
fchr[$]: 2991688149
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1001441015 bytes to primary EBWT file: idx_hg19/bowtie2.1.bt2
Wrote 747922044 bytes to secondary EBWT file: idx_hg19/bowtie2.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2991688149
    bwtLen: 2991688150
    sz: 747922038
    bwtSz: 747922038
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 186980510
    offsSz: 747922040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 15581710
    numLines: 15581710
    ebwtTotLen: 997229440
    ebwtTotSz: 997229440
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:53:59
Reading reference sizes
  Time reading reference sizes: 00:00:26
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:22
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 747922037
Using parameters --bmax 560941528 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 560941528 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:16
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:13
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Avg bucket size: 3.3241e+08 (target: 560941527)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (560941528) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 373479466 for bucket 1
  (Using difference cover)
  Sorting block time: 00:03:53
Returning block of 373479467 for bucket 1
Getting block 2 of 9
  Reserving size (560941528) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 276496766 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:56
Returning block of 276496767 for bucket 2
Getting block 3 of 9
  Reserving size (560941528) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 426828679 for bucket 3
  (Using difference cover)
  Sorting block time: 00:04:34
Returning block of 426828680 for bucket 3
Getting block 4 of 9
  Reserving size (560941528) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 153 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 4
Getting block 5 of 9
  Reserving size (560941528) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 579448197 for bucket 5
  (Using difference cover)
  Sorting block time: 00:06:39
Returning block of 579448198 for bucket 5
Getting block 6 of 9
  Reserving size (560941528) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 301223452 for bucket 6
  (Using difference cover)
  Sorting block time: 00:03:17
Returning block of 301223453 for bucket 6
Getting block 7 of 9
  Reserving size (560941528) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 314079716 for bucket 7
  (Using difference cover)
  Sorting block time: 00:03:18
Returning block of 314079717 for bucket 7
Getting block 8 of 9
  Reserving size (560941528) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 498960951 for bucket 8
  (Using difference cover)
  Sorting block time: 00:05:25
Returning block of 498960952 for bucket 8
Getting block 9 of 9
  Reserving size (560941528) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 221170761 for bucket 9
  (Using difference cover)
  Sorting block time: 00:02:12
Returning block of 221170762 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 881799876
fchr[G]: 1495117925
fchr[T]: 2108886948
fchr[$]: 2991688149
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1001441015 bytes to primary EBWT file: idx_hg19/bowtie2.rev.1.bt2
Wrote 747922044 bytes to secondary EBWT file: idx_hg19/bowtie2.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2991688149
    bwtLen: 2991688150
    sz: 747922038
    bwtSz: 747922038
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 186980510
    offsSz: 747922040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 15581710
    numLines: 15581710
    ebwtTotLen: 997229440
    ebwtTotSz: 997229440
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:56:40
 ---> 8ed9446541f9
Removing intermediate container a4127bd506e1
Step 9 : COPY bowtie2.py /usr/local/bin/bowtie2.py
 ---> 46963657c668
Removing intermediate container d396a250bf3d
Successfully built 46963657c668
